name: Docker CI

on:
  push:
    branches:
      - main
      - 'fix/**'
      # - 'feature/**'
      # - 'dev/**'
  # The branches below must be a subset of the branches above
  pull_request:
    branches:
      - main

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  RELEASE: 0.4.0

jobs:

  build-and-push-image-api:

    name: API - build/push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run 'build-push' local action
        uses: ./.github/actions/build-push
        with:
          name: API
          src: api
          registry: ${{ env.REGISTRY }}
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: pierrz/biggie_api_img
          tag: ${{ env.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-image-celery:

    name: Celery - build/push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run 'build-push' local action
        uses: ./.github/actions/build-push
        with:
          name: Celery
          src: celery_app
          registry: ${{ env.REGISTRY }}
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: pierrz/biggie_celery_img
          tag: ${{ env.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}

  test-built-images:

    name: Test built images
    needs: [build-and-push-image-api, build-and-push-image-celery]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # all variables required for the test (based on the docker-compose settings) should be declared here
    env:
      CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      TOKEN_GITHUB_API: ${{ secrets.TOKEN_GITHUB_API }}
      VOLUME_MOUNT: ${{ secrets.VOLUME_MOUNT }}
      NETWORK: test_network   # specific to this ci/docker configuration

    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create network & Mongo container
        run: >
          docker network create -d bridge ${{ env.NETWORK }}
          && docker run -d --name biggie_mongo
          --env MONGO_INITDB_ROOT_USERNAME=${{ env.MONGO_INITDB_ROOT_USERNAME }}
          --env MONGO_INITDB_ROOT_PASSWORD=${{ env.MONGO_INITDB_ROOT_PASSWORD }}
          --network=${{ env.NETWORK }}
          mongo:5.0.8

      - name: Create Postgres container
        run: >
          cd /home/runner/work/biggie/biggie/conf/postgres
          && docker build . --tag biggie_postgres:latest
          && docker run -d --name biggie_postgres
          --env POSTGRES_DB=${{ env.POSTGRES_DB }}
          --env POSTGRES_USER=${{ env.POSTGRES_USER }}
          --env POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
          --env DB_NAME=${{ env.DB_NAME }}
          --env DB_USER=${{ env.DB_USER }}
          --env DB_PASSWORD=${{ env.DB_PASSWORD }}
          --network=${{ env.NETWORK }}
          biggie_postgres:latest

      - name: Test API image
        run: >
          docker run
          --env MONGODB_URI=${{ env.MONGODB_URI }}
          --env DB_NAME=${{ env.DB_NAME }}
          --env DB_USER=${{ env.DB_USER }}
          --env DB_PASSWORD=${{ env.DB_PASSWORD }}
          --network=${{ env.NETWORK }}
          ghcr.io/pierrz/biggie_api_img:latest
          pytest -vv

      - name: Test Celery image
        run: >
          docker run
          --env CELERY_BROKER_URL=${{ env.CELERY_BROKER_URL }}
          --env CELERY_RESULT_BACKEND=${{ env.CELERY_RESULT_BACKEND }}
          --volume ${{ env.VOLUME_MOUNT }}
          --env MONGODB_URI=${{ env.MONGODB_URI }}
          --env DB_NAME=${{ env.DB_NAME }}
          --env DB_USER=${{ env.DB_USER }}
          --env DB_PASSWORD=${{ env.DB_PASSWORD }}
          --env TOKEN_GITHUB_API=${{ env.TOKEN_GITHUB_API }}
          --env TEST_MODE="True"
          --network=${{ env.NETWORK }}
          ghcr.io/pierrz/biggie_celery_img:latest
          python3.10 -m pytest -vv --asyncio-mode=strict
