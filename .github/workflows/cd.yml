# CD pipeline to deploy the code on the Scaleway machine
name: CD pipeline

on:
  workflow_dispatch:      # manual trigger
  workflow_run:
    workflows: ["CI pipeline"]
    types: [completed]

jobs:

  # approval_timeout:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Wait for approval or timeout
  #     run: |
  #         TIMEOUT_MINUTES=2
  #         let TIMEOUT_SECONDS=TIMEOUT_MINUTES*60
  #         END_TIME=$(($(date +%s) + $TIMEOUT_SECONDS))
  #         echo "$TIMEOUT_MINUTES"
  #         echo "$TIMEOUT_SECONDS"
  #         echo "$END_TIME"

  #         while [[ $(date +%s) -lt $END_TIME ]]; do
  #           approval_status=$(curl -s \
  #             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
  #             -H "Accept: application/vnd.github.v3+json" \
  #             "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}")

  #           if [[ $approval_status == *"approved"* ]]; then
  #             echo "Pipeline approved, continuing..."
  #             exit 0
  #           fi

  #           echo "Waiting for approval ... ($(( ($END_TIME - $(date +%s)) / 60 )) minutes remaining)"
  #           sleep $TIMEOUT_SECONDS
  #         done

  #         echo "Timeout reached without approval"
  #         exit 1

  set_environment_url:
    runs-on: ubuntu-latest
    steps:
    - name: Set Environment URL Output
      run: echo "url=${{ secrets.ENVIRONMENT_URL }}" >> $GITHUB_OUTPUT

  deployment:

    permissions:
      # The "id-token: write" permission is required
      # or Machine ID will not be able to authenticate with the cluster.
      id-token: write
      contents: read

    runs-on: ubuntu-latest
    needs: set_environment_url
    timeout-minutes: 1
    environment:
      name: production
      url: ${{ needs.approval_timeout.outputs.url }}

    env:

        ##############
        # CD VARIABLES

        # Debug
        # TF_LOG: DEBUG
        # TELEPORT_DEBUG: 1

        # Scaleway secrets
        TF_VAR_scaleway_access_key: ${{ secrets.SCALEWAY_ACCESS_KEY }}
        TF_VAR_scaleway_secret_key: ${{ secrets.SCALEWAY_SECRET_KEY }}
        TF_VAR_scaleway_organization_id: ${{ secrets.SCALEWAY_ORGANIZATION_ID }}
        TF_VAR_scaleway_project_id: ${{ secrets.SCALEWAY_PROJECT_ID }}
        TF_VAR_scaleway_zone: ${{ secrets.SCALEWAY_ZONE }}
        TF_VAR_scaleway_server_name: ${{ secrets.SCALEWAY_SERVER_NAME }}
        TF_VAR_scaleway_server_id: ${{ secrets.SCALEWAY_SERVER_ID }}
        TF_VAR_scaleway_server_os_id: ${{ secrets.SCALEWAY_SERVER_OS_ID }}
        TF_VAR_scaleway_server_public_ip: ${{ secrets.SCALEWAY_SERVER_PUBLIC_IP }}
        TF_VAR_scaleway_server_user: ${{ secrets.SCALEWAY_SERVER_USER }}
        TF_VAR_scaleway_ssh_key_names: ${{ secrets.SCALEWAY_SSH_KEY_NAMES }}

        # Teleport secrets
        TF_VAR_teleport_proxy: ${{ secrets.TELEPORT_PROXY }}
        TF_VAR_teleport_bot: ${{ secrets.TELEPORT_BOT }}

        # Github secrets
        TF_VAR_github_workspace: ${{ github.workspace }}
        TF_VAR_github_repo_name: ${{ github.repository }}

        ##############
        # SOFTWARE ENV

        # Docker routing
        TF_VAR_docker_subnet_base: ${{ secrets.DOCKER_SUBNET_BASE }}
        TF_VAR_compose_prefix: ${{ secrets.COMPOSE_PREFIX }}
        TF_VAR_spark_ports_range: ${{ secrets.SPARK_PORTS_RANGE }}
        TF_VAR_rabbitmq_port: ${{ secrets.RABBITMQ_PORT }}
        TF_VAR_logs_dir: ${{ secrets.LOGS_DIR }}
        TF_VAR_data_dir: ${{ secrets.DATA_DIR }}
        TF_VAR_celery_broker_url: ${{ secrets.CELERY_BROKER_URL }}
        TF_VAR_celery_result_backend: ${{ secrets.CELERY_RESULT_BACKEND }}
        TF_VAR_host_user_uid: ${{ secrets.HOST_USER_UID }}

        # DBs secrets
        TF_VAR_db_name: ${{ secrets.DB_NAME }}
        # Postgres secrets
        TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
        TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
        TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
        TF_VAR_postgres_app_user: ${{ secrets.POSTGRES_APP_USER }}
        TF_VAR_postgres_app_password: ${{ secrets.POSTGRES_APP_PASSWORD }}
        TF_VAR_postgres_port: ${{ secrets.POSTGRES_PORT }}
        # Mongo secrets
        TF_VAR_mongo_initdb_root_username: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        TF_VAR_mongo_initdb_root_password: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        TF_VAR_mongo_username: ${{ secrets.MONGO_USERNAME }}
        TF_VAR_mongo_password: ${{ secrets.MONGO_PASSWORD }}
        TF_VAR_mongo_port: ${{ secrets.MONGO_PORT }}

        # SERVICES
        # Orchestrator secrets
        TF_VAR_token_github_api: ${{ secrets.TOKEN_GITHUB_API }}
        # API secrets
        TF_VAR_api_port: ${{ secrets.API_PORT }}
        # Jupyter secrets
        TF_VAR_jupyter_port: ${{ secrets.JUPYTER_PORT }}
        # TF_VAR_jupyter_subdomain: ${{ secrets.JUPYTER_SUBDOMAIN }}    # TODO: refine jupyter config

        # Monitoring
        # Flower secrets
        TF_VAR_flower_port: ${{ secrets.FLOWER_PORT }}
        # DBeaver secrets
        TF_VAR_dbeaver_port: ${{ secrets.DBEAVER_PORT }}
        # Mongo-Express secrets
        TF_VAR_me_config_mongodb_adminusername: ${{ secrets.ME_CONFIG_MONGODB_ADMINUSERNAME }}
        TF_VAR_me_config_mongodb_adminpassword: ${{ secrets.ME_CONFIG_MONGODB_ADMINPASSWORD }}
        TF_VAR_me_config_basicauth_username: ${{ secrets.ME_CONFIG_BASICAUTH_USERNAME }}
        TF_VAR_me_config_basicauth_password: ${{ secrets.ME_CONFIG_BASICAUTH_PASSWORD }}
        TF_VAR_me_config_port: ${{ secrets.ME_CONFIG_PORT }}

    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success' &&
        (
          (
            github.event.workflow_run.head_branch != 'main' &&
            github.event.workflow_run.event == 'pull_request'
          ) ||
          (
            github.event.workflow_run.head_branch == 'main' &&
            (
              github.event.workflow_run.event == 'pull_request' &&
              github.event.workflow_run.name == 'pull_request.closed'
            ) ||
            (github.event.workflow_run.event == 'push')
          )
        )
      )
    steps:

    - name: Set Secrets for Pull Request
      if: github.event_name == 'pull_request'
      run: echo "TF_VAR_github_repo_branch=${{ github.head_ref }}" >> $GITHUB_ENV

    - name: Set repository branch environment variable
      run: |
        echo "${{ needs.approval_timeout.outputs.url }}"
        if [ -z "${{ env.TF_VAR_github_repo_branch }}" ]; then
            echo "TF_VAR_github_repo_branch is not set"
            echo "TF_VAR_github_repo_branch=${{ github.ref_name }}" >> $GITHUB_ENV
        fi
        echo "TF_VAR_github_repo_branch is set to: ${{ env.TF_VAR_github_repo_branch }}"

    - name: Checkout repository
      uses: actions/checkout@v4.1.7

    - name: Set up Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '3.11'

    # This step is here to overcome the issue with hashed values in Github Actions secrets
    - name: Generate hashed password for Jupyter
      run: |
        python -m venv venv
        . venv/bin/activate
        python -m pip install --upgrade pip
        pip install jupyter_server
        HASHED_PASSWORD=$(python -c "from jupyter_server.auth import passwd; print(passwd('${{ secrets.JUPYTER_PASSWORD }}'))")
        echo "'$HASHED_PASSWORD'" >> ./hashed_password.txt

    - name: Fetch Teleport binaries
      uses: teleport-actions/setup@v1.0.6
      with:
        version: 16.4.2

    - name: Fetch credentials using Machine ID
      id: auth
      uses: teleport-actions/auth@v2.0.3
      with:
        proxy: ${{ secrets.TELEPORT_PROXY }}
        token: ${{ secrets.TELEPORT_BOT }}
        certificate-ttl: 1h
        # Enable the submission of anonymous usage telemetry.
        anonymous-telemetry: 1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.2

    - name: Initialize Terraform
      uses: ./.github/actions/terraform
      with:
        command: init

    - name: Terraform Format
      uses: ./.github/actions/terraform
      with:
        command: fmt -check

    - name: Terraform Plan
      uses: ./.github/actions/terraform
      with:
        command: plan

    - name: Terraform Import
      continue-on-error: true
      uses: ./.github/actions/terraform
      with:
        command: import scaleway_baremetal_server.main ${{ secrets.SCALEWAY_ZONE }}/${{ secrets.SCALEWAY_SERVER_ID }}

    - name: Apply Terraform configuration
      uses: ./.github/actions/terraform
      with:
        command: apply -auto-approve
