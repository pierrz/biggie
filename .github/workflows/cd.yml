# CD pipeline with timeout based cancellation logic to deploy the code on the Scaleway machine
name: CD pipeline

on:
  workflow_dispatch:      # manual trigger
  workflow_run:
    workflows: ["CI pipeline"]
    types: [completed]

jobs:

  check-condition:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Run condition check
        uses: ./.github/actions/condition-check
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  approval-timeout:
    runs-on: ubuntu-latest
    needs: check-condition
    if: ${{ needs.check-condition.outputs.RUN_DEPLOYMENT }} == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2
      - name: Run approval timeout mechanism
        uses: ./.github/actions/approval-timeout
        with:
          ENVIRONMENT: production
          TIMEOUT_MINUTES: 15
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}

  deployment:

    permissions:
      # The "id-token: write" permission is required
      # or Machine ID will not be able to authenticate with the cluster.
      id-token: write
      contents: read

    runs-on: ubuntu-latest
    environment:
      name: production

    env:

        ##############
        # CD VARIABLES

        # Debug
        # TF_LOG: DEBUG
        # TELEPORT_DEBUG: 1

        # Scaleway secrets
        TF_VAR_scaleway_access_key: ${{ secrets.SCALEWAY_ACCESS_KEY }}
        TF_VAR_scaleway_secret_key: ${{ secrets.SCALEWAY_SECRET_KEY }}
        TF_VAR_scaleway_organization_id: ${{ secrets.SCALEWAY_ORGANIZATION_ID }}
        TF_VAR_scaleway_project_id: ${{ secrets.SCALEWAY_PROJECT_ID }}
        TF_VAR_scaleway_zone: ${{ secrets.SCALEWAY_ZONE }}
        TF_VAR_scaleway_server_name: ${{ secrets.SCALEWAY_SERVER_NAME }}
        TF_VAR_scaleway_server_id: ${{ secrets.SCALEWAY_SERVER_ID }}
        TF_VAR_scaleway_server_os_id: ${{ secrets.SCALEWAY_SERVER_OS_ID }}
        TF_VAR_scaleway_server_public_ip: ${{ secrets.SCALEWAY_SERVER_PUBLIC_IP }}
        TF_VAR_scaleway_server_user: ${{ secrets.SCALEWAY_SERVER_USER }}
        TF_VAR_scaleway_ssh_key_names: ${{ secrets.SCALEWAY_SSH_KEY_NAMES }}

        # Teleport secrets
        TF_VAR_teleport_proxy: ${{ secrets.TELEPORT_PROXY }}
        TF_VAR_teleport_bot: ${{ secrets.TELEPORT_BOT }}

        # Github secrets
        TF_VAR_github_workspace: ${{ github.workspace }}
        TF_VAR_github_repo_name: ${{ github.repository }}

        ##############
        # SOFTWARE ENV

        # Docker routing
        TF_VAR_docker_subnet_base: ${{ secrets.DOCKER_SUBNET_BASE }}
        TF_VAR_compose_prefix: ${{ secrets.COMPOSE_PREFIX }}
        TF_VAR_spark_ports_range: ${{ secrets.SPARK_PORTS_RANGE }}
        TF_VAR_logs_dir: ${{ secrets.LOGS_DIR }}
        TF_VAR_data_dir: ${{ secrets.DATA_DIR }}
        TF_VAR_celery_broker_url: ${{ secrets.CELERY_BROKER_URL }}
        TF_VAR_celery_result_backend: ${{ secrets.CELERY_RESULT_BACKEND }}
        TF_VAR_host_user_uid: ${{ secrets.HOST_USER_UID }}

        # DBs secrets
        TF_VAR_db_name: ${{ secrets.DB_NAME }}
        # Postgres secrets
        TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
        TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
        TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
        TF_VAR_postgres_app_user: ${{ secrets.POSTGRES_APP_USER }}
        TF_VAR_postgres_app_password: ${{ secrets.POSTGRES_APP_PASSWORD }}
        # Mongo secrets
        TF_VAR_mongo_initdb_root_username: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
        TF_VAR_mongo_initdb_root_password: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
        TF_VAR_mongo_username: ${{ secrets.MONGO_USERNAME }}
        TF_VAR_mongo_password: ${{ secrets.MONGO_PASSWORD }}

        # SERVICES
        # API secrets
        TF_VAR_api_port: ${{ secrets.API_PORT }}
        TF_VAR_uvicorn_port: ${{ secrets.UVICORN_PORT }}
        # Orchestrator secrets
        TF_VAR_token_github_api: ${{ secrets.TOKEN_GITHUB_API }}

        # Monitoring
        # Mongo-Express secrets
        TF_VAR_me_config_mongodb_adminusername: ${{ secrets.ME_CONFIG_MONGODB_ADMINUSERNAME }}
        TF_VAR_me_config_mongodb_adminpassword: ${{ secrets.ME_CONFIG_MONGODB_ADMINPASSWORD }}
        TF_VAR_me_config_basicauth_username: ${{ secrets.ME_CONFIG_BASICAUTH_USERNAME }}
        TF_VAR_me_config_basicauth_password: ${{ secrets.ME_CONFIG_BASICAUTH_PASSWORD }}

    needs: check-condition
    if: ${{ needs.check-condition.outputs.RUN_DEPLOYMENT }} == 'true'
    steps:

    - name: Set repository branch secret    # whether it's a PR or a Push
      run: |
        if [ -z "${{ github.ref_name }}" ]; then
          echo "TF_VAR_github_repo_branch=${{ github.head_ref }}" >> $GITHUB_ENV
        else
          echo "TF_VAR_github_repo_branch=${{ github.ref_name }}" >> $GITHUB_ENV
        fi

    - name: Checkout repository
      uses: actions/checkout@v4.2.2

    - name: Set up Python
      uses: actions/setup-python@v5.2.0
      with:
        python-version: '3.11'

    # This step is here to overcome the issue with hashed values in Github Actions secrets
    - name: Generate hashed password for Jupyter
      run: |
        python -m venv venv
        . venv/bin/activate
        python -m pip install --upgrade pip
        pip install jupyter_server
        HASHED_PASSWORD=$(python -c "from jupyter_server.auth import passwd; print(passwd('${{ secrets.JUPYTER_PASSWORD }}'))")
        echo "'$HASHED_PASSWORD'" >> ./hashed_password.txt

    - name: Fetch Teleport binaries
      uses: teleport-actions/setup@v1.0.6
      with:
        version: 16.4.2

    - name: Fetch credentials using Machine ID
      id: auth
      uses: teleport-actions/auth@v2.0.3
      with:
        proxy: ${{ secrets.TELEPORT_PROXY }}
        token: ${{ secrets.TELEPORT_BOT }}
        certificate-ttl: 1h
        # Enable the submission of anonymous usage telemetry.
        anonymous-telemetry: 1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3.1.2

    - name: Initialize Terraform
      uses: ./.github/actions/terraform
      with:
        command: init

    - name: Terraform Format
      uses: ./.github/actions/terraform
      with:
        command: fmt -check

    - name: Terraform Plan
      uses: ./.github/actions/terraform
      with:
        command: plan

    - name: Terraform Import
      continue-on-error: true
      uses: ./.github/actions/terraform
      with:
        command: import scaleway_baremetal_server.main ${{ secrets.SCALEWAY_ZONE }}/${{ secrets.SCALEWAY_SERVER_ID }}

    - name: Apply Terraform configuration
      uses: ./.github/actions/terraform
      with:
        command: apply -auto-approve
