name: Docker CI V2

on:
  push:
    branches:
      - main
    #   - 'features/**'
  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  RELEASE: 0.4.7    # /!\ increase this to avoid overwriting older image

jobs:

  build-and-push-image-api:

    name: API - build/push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      # Cache for Poetry dependencies
      - name: Set up caching for Poetry
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies using Poetry
        run: poetry install

      - name: Run 'build-push' local action
        uses: ./.github/actions/build-push
        with:
          name: API
          src: api
          registry: ${{ env.REGISTRY }}
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: pierrz/biggie_api_img
          tag: ${{ env.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-image-celery:

    name: Celery - build/push image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      # Cache for Poetry dependencies
      - name: Set up caching for Poetry
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.9'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3.11 -

      - name: Install dependencies using Poetry
        run: poetry install

      - name: Run 'build-push' local action
        uses: ./.github/actions/build-push
        with:
          name: Celery
          src: celery_app
          registry: ${{ env.REGISTRY }}
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: pierrz/biggie_celery_img
          tag: ${{ env.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}

  test-built-images:

    name: Test built images
    needs: [build-and-push-image-api, build-and-push-image-celery]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}
      CELERY_RESULT_BACKEND: ${{ secrets.CELERY_RESULT_BACKEND }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      TOKEN_GITHUB_API: ${{ secrets.TOKEN_GITHUB_API }}
      VOLUME_MOUNT: ${{ secrets.VOLUME_MOUNT }}
      NETWORK: test_network

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create network & Mongo container
        run: |
          docker network create -d bridge ${{ env.NETWORK }}
          docker run -d --name biggie_mongo \
            --env MONGO_INITDB_ROOT_USERNAME=${{ env.MONGO_INITDB_ROOT_USERNAME }} \
            --env MONGO_INITDB_ROOT_PASSWORD=${{ env.MONGO_INITDB_ROOT_PASSWORD }} \
            --network=${{ env.NETWORK }} \
            mongo:7.0.14

      - name: Create Postgres container
        run: |
          cd /home/runner/work/biggie/biggie/conf/postgres \
          && docker build . --tag biggie_postgres:latest \
          && docker run -d --name biggie_postgres \
            --env POSTGRES_DB=${{ env.POSTGRES_DB }} \
            --env POSTGRES_USER=${{ env.POSTGRES_USER }} \
            --env POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }} \
            --env DB_NAME=${{ env.DB_NAME }} \
            --env DB_USER=${{ env.DB_USER }} \
            --env DB_PASSWORD=${{ env.DB_PASSWORD }} \
            --network=${{ env.NETWORK }} \
            biggie_postgres:latest

      - name: Test API image
        run: |
          docker run \
            --env MONGODB_URI=${{ env.MONGODB_URI }} \
            --env DB_NAME=${{ env.DB_NAME }} \
            --env DB_USER=${{ env.DB_USER }} \
            --env DB_PASSWORD=${{ env.DB_PASSWORD }} \
            --network=${{ env.NETWORK }} \
            ghcr.io/pierrz/biggie_api_img:latest \
            sh -c "poetry install --only dev \
                   && pytest -vv"

      - name: Test Celery image
        run: |
          docker run \
            --env CELERY_BROKER_URL=${{ env.CELERY_BROKER_URL }} \
            --env CELERY_RESULT_BACKEND=${{ env.CELERY_RESULT_BACKEND }} \
            --volume ${{ env.VOLUME_MOUNT }} \
            --env MONGODB_URI=${{ env.MONGODB_URI }} \
            --env DB_NAME=${{ env.DB_NAME }} \
            --env DB_USER=${{ env.DB_USER }} \
            --env DB_PASSWORD=${{ env.DB_PASSWORD }} \
            --env TOKEN_GITHUB_API=${{ env.TOKEN_GITHUB_API }} \
            --env TEST_MODE="True" \
            --network=${{ env.NETWORK }} \
            ghcr.io/pierrz/biggie_celery_img:latest \
            sh -c "poetry install --only dev \
                   && python3.11 -m pytest -vv --asyncio-mode=strict"

      # Publish test coverage report
      - name: Run tests and generate coverage report
        run: |
          docker run ghcr.io/pierrz/biggie_api_img:latest \
            pytest --cov-report xml:coverage.xml --cov=.

      - name: Upload coverage report
        uses: actions/upload-artifact@v3.2.1-node20
        with:
          name: coverage-report
          path: coverage.xml
