# CI setup, building the main images and running the tests against them
#  - Can be self-hosted for debugging purposes
#  - TODO: fix the Github action about PR comments from coverage report (very end of this file)

name: CI Pipeline

on:
  workflow_run:
    workflows: ["CodeQL Analysis"]
    types:
      - completed
  workflow_dispatch:      # manual trigger

env:
  REGISTRY: ghcr.io
  RELEASE: 0.5.3                # /!\ increase this to avoid overwriting older image

jobs:

  build-and-push-image-api:

    name: API - build/push image
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Run 'build-push' local action
        uses: ./.github/actions/build-push
        with:
          name: API
          src: api
          registry: ${{ env.REGISTRY }}
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: pierrz/biggie_api_img
          tag: ${{ env.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-image-orchestrator:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}

    name: Orchestrator - build/push image
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Run 'build-push' local action
        uses: ./.github/actions/build-push
        with:
          name: Orchestrator
          src: orchestrator
          registry: ${{ env.REGISTRY }}
          actor: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
          image: pierrz/biggie_orchestrator_img
          tag: ${{ env.RELEASE }}
          labels: ${{ steps.meta.outputs.labels }}

  test:

    name: Tests
    needs: [build-and-push-image-api, build-and-push-image-orchestrator]
    runs-on: ubuntu-latest
    # runs-on: self-hosted
    permissions:
      packages: write
      # specific to py-cov-action/python-coverage-comment-action (WIP)
      pull-requests: write
      contents: write

    env:
      MONGODB_URI: "mongodb://${{ secrets.MONGO_USERNAME }}:${{ secrets.MONGO_PASSWORD }}@biggie_mongo:27017/"
      NETWORK: ci_network
      POSTGRES_HOST: "biggie_postgres:5432"
      SPARK_MASTER_URL: "spark://spark-master:7077"
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4.1.7

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create network & Mongo container
        run: docker network create -d bridge ${{ env.NETWORK }}

      - name: Create Mongo container
        run: |
          docker build db/mongo --tag biggie_mongo:latest
          docker run -d --name biggie_mongo \
            --env MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }} \
            --env MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }} \
            --network=${{ env.NETWORK }} \
            biggie_mongo:latest

      - name: Create Postgres container
        run: |
          docker build db/postgres --tag biggie_postgres:latest
          docker run -d --name biggie_postgres \
            --env POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            --env POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --env POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --env DB_NAME=${{ secrets.DB_NAME }} \
            --env DB_USER=${{ secrets.POSTGRES_APP_USER }} \
            --env DB_PASSWORD=${{ secrets.POSTGRES_APP_PASSWORD }} \
            --network=${{ env.NETWORK }} \
            --volume ./db/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d \
            biggie_postgres:latest

      # /!\ The flag --network-alias spark-master is CRITICAL for the master /!\
      - name: Create Spark containers (master and workers)
        run: |
          docker build spark_cluster --tag biggie_spark:latest
          docker run -d --name biggie_spark-master \
            --env SPARK_MODE=master \
            --publish 7077:7077 \
            --network=${{ env.NETWORK }} \
            --network-alias spark-master \
            biggie_spark:latest \
          && docker run -d --name biggie_spark-worker-1 \
            --env SPARK_MODE=worker \
            --env SPARK_MASTER_URL=${{ env.SPARK_MASTER_URL }} \
            --network=${{ env.NETWORK }} \
            biggie_spark:latest \
          && docker run -d --name biggie_spark-worker-2 \
            --env SPARK_MODE=worker \
            --env SPARK_MASTER_URL=${{ env.SPARK_MASTER_URL }} \
            --network=${{ env.NETWORK }} \
            biggie_spark:latest

      - name: API tests
        run: |
          docker run --name biggie_api-test \
            --env MONGODB_URI=${{ env.MONGODB_URI }} \
            --env DB_NAME=${{ secrets.DB_NAME }} \
            --env POSTGRES_APP_USER=${{ secrets.POSTGRES_APP_USER }} \
            --env POSTGRES_APP_PASSWORD=${{ secrets.POSTGRES_APP_PASSWORD }} \
            --network=${{ env.NETWORK }} \
            --volume ${{ secrets.DATA_DIR }}:/opt/data \
            ghcr.io/pierrz/biggie_api_img:latest \
            sh -c "poetry install --only dev && \
            pytest -vv --cov-config=pyproject.toml --cov=. --cov-report=html && \
            mkdir /opt/data/api_coverage && cp .coverage /opt/data/api_coverage/.coverage"

      - name: Orchestrator tests
        run: |
          docker run --name biggie_orchestrator-test \
            --env CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }} \
            --env CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }} \
            --env MONGODB_URI=${{ env.MONGODB_URI }} \
            --env DB_NAME=${{ secrets.DB_NAME }} \
            --env POSTGRESDB_HOST=${{ env.POSTGRES_HOST }} \
            --env POSTGRES_APP_USER=${{ secrets.POSTGRES_APP_USER }} \
            --env POSTGRES_APP_PASSWORD=${{ secrets.POSTGRES_APP_PASSWORD }} \
            --env TOKEN_GITHUB_API=${{ secrets.TOKEN_GITHUB_API }} \
            --env TEST_MODE="True" \
            --network=${{ env.NETWORK }} \
            --volume ${{ secrets.DATA_DIR }}:/opt/data \
            ghcr.io/pierrz/biggie_orchestrator_img:latest \
            sh -c "poetry install --only dev && \
            python3.11 -m pytest -vv --asyncio-mode=strict --cov-config=pyproject.toml --cov=. --cov-report=html && \
            mkdir /opt/data/orchestrator_coverage && cp .coverage /opt/data/orchestrator_coverage/.coverage"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4.4.0
        with:
          name: html-coverage-report
          path: |
            ${{ secrets.DATA_DIR }}/orchestrator_coverage_html_report
            ${{ secrets.DATA_DIR }}/api_coverage_html_report

      # /!\ Step triggered only when the pipeline is running in the self-hosted runner /!\
      - name: Delete Docker elements in self-hosted runner
        if: runner.labels == 'self-hosted' && always()
        run: |
          # Get names of all containers starting with biggie_
          echo "Getting containers name ..."
          CONTAINER_NAMES=$(docker ps -a --format '{{.Names}}' | grep '^biggie_' || true)

          if [ ! -z "$CONTAINER_NAMES" ]; then
            # Get volume names associated with the containers
            echo "Retrieving created volumes ..."
            VOLUME_NAMES=$(docker container inspect $CONTAINER_NAMES \
              -f '{{range .Mounts}}{{if eq .Type "volume"}}{{.Name}} {{end}}{{end}}' | tr ' ' '\n' | sort -u | tr '\n' ' ') || echo "Failed to inspect containers"

            # Remove containers
            echo "Removing containers ..."
            docker container stop -f $CONTAINER_NAMES || echo "Failed to remove some containers"
            docker container rm -f $CONTAINER_NAMES || echo "Failed to remove some containers"

            # Remove volumes
            if [ ! -z "$VOLUME_NAMES" ]; then
              echo "Removing volumes ..."
              docker volume rm $VOLUME_NAMES || echo "Failed to remove some volumes"
            else
              echo "No volumes to remove"
            fi
          else
            echo "No biggie_* containers found"
          fi

          # Remove network
          echo "Removing created network ..."
          docker network rm ${{ env.NETWORK }} || true


      # TODO: fix py-cov-action/python-coverage-comment-action errors (permissions, absolute/relative files)
      # Cf. https://github.com/py-cov-action/python-coverage-comment-action?tab=readme-ov-file#merging-multiple-coverage-reports
      # Error: Cannot read .coverage files because files are absolute. You need to configure coverage to write relative paths by adding the following option to your coverage configuration file:
      # [run]
      # relative_files = true
      # Note that the specific format can be slightly different if you're using setup.cfg or pyproject.toml. See details in: https://coverage.readthedocs.io/en/latest/config.html#config-run-relative-files
      # Error: Critical error. This error possibly occurred because the permissions of the workflow are set incorrectly. You can see the correct setting of permissions here: https://github.com/py-cov-action/python-coverage-comment-action#basic-usage

      # for refined merging approach
      # - name: Merge coverage reports
      #   run: |
      #     ls -al ${{ github.workspace }}/data
      #     ls -al data
      #     pip install coverage
      #     coverage combine --keep ${{ github.workspace }}/data/.coverage.api ${{ github.workspace }}/data/.coverage.orchestrator
      #     coverage html -d ${{ github.workspace }}/data
      #     cp ${{ github.workspace }}/data/.coverage ${{ github.workspace }}/data/merged_coverage/.coverage

      # - name: Comment coverage
      #   uses: py-cov-action/python-coverage-comment-action@v3.28
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     COVERAGE_PATH: data/orchestrator_coverage
      #     MINIMUM_GREEN: 80
      #     MINIMUM_ORANGE: 50
      #     COMMENT_TEMPLATE: |
      #       ### CELERY Coverage Report
      #       {coverage_report}

      # - name: Store Pull Request comment to be posted
      #   uses: actions/upload-artifact@v4
      #   if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      #   with:
      #     name: python-coverage-comment-action-orchestrator
      #     path: python-coverage-comment-action.txt

      # - name: Comment coverage
      #   uses: py-cov-action/python-coverage-comment-action@v3.28
      #   with:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     COVERAGE_PATH: ${{ github.workspace }}/data/api_coverage
      #     MINIMUM_GREEN: 80
      #     MINIMUM_ORANGE: 50
      #     COMMENT_TEMPLATE: |
      #       ### API Coverage Report
      #       {coverage_report}

      # - name: Store Pull Request comment to be posted
      #   uses: actions/upload-artifact@v4
      #   if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      #   with:
      #     name: python-coverage-comment-action-api
      #     path: python-coverage-comment-action.txt
