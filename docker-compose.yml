# TODO:
#  - mount Mongo and Postgres logs
#  - simplify Postgres container (mount init script, no dockerfile)
#  - implement Mongo conf for authentication
#  - debug setup

x-biggie-common:
  environment:
    &biggie-common-env
    MONGODB_URI: "${MONGODB_URI}"
    DB_NAME: "${DB_NAME}"
    DB_USER: "${DB_USER}"
    DB_PASSWORD: "${DB_PASSWORD}"

x-biggie-celery-prod:
  &biggie-celery-prod
  environment:
    &biggie-celery-prod-env
    <<: *biggie-common-env
    TOKEN_GITHUB_API: "${TOKEN_GITHUB_API}"
    CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
    CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND}"
    # PYTHON_ENABLE_DEBUGGER: 1   # debug mode
  volumes:
    - ./logs/celery_app:/opt/celery_app/logs
    - "${VOLUME_MOUNT}"
    - ./data/github_events/diagrams:/opt/data/github_events/diagrams  # necessary for the cleaning task

x-biggie-celery-test:
  &biggie-celery-test
  environment:
    <<: *biggie-celery-prod-env
  volumes:
    - ./logs/celery_app:/opt/celery_app/logs
    - "${VOLUME_MOUNT}"

volumes:
  biggie_vmongo:
    name: biggie_vmongo
  biggie_vpostgres:
    name: biggie_vpostgres
  biggie_vrabbitmq:
    name: biggie_vrabbitmq

services:

  nginx:
    image: nginx:1.27.1
    container_name: biggie_nginx
    volumes:
      - ./conf/nginx/docker_base.conf:/etc/nginx/nginx.conf:ro
      - ./conf/nginx/certificate.conf:/etc/nginx/certificate.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./conf/nginx/app_docker.conf:/etc/nginx/sites-enabled/app_docker.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro  # certificate of the host machine
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api_prod
    profiles:
      - live_prod

  mongo:
    image: mongo:7.0.14
    container_name: biggie_mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    volumes:
      - biggie_vmongo:/data/db
      - ./logs/mongodb:/var/log/mongodb
      # TODO: implement authentication for api container calls
      # - ./setup/mongo/mongod.conf:/etc/mongo/mongod.conf:ro

  postgres:
    container_name: biggie_postgres
    build:
      context: conf/postgres
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASSWORD: "${DB_PASSWORD}"
    volumes:
      - biggie_vpostgres:/var/lib/postgresql/data
      - ./logs/postgres:/var/log/postgresql #/postgresql-16.4-main.log
      # todo: implement that to remove the dockerfile
      # - ./conf/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  api_test:
    container_name: biggie_api_test
    image: biggie_api_img
    build:
      context: .
      dockerfile: api/Dockerfile
      args:
        - TEST_MODE="True"
    environment:
      <<: *biggie-common-env
    command: pytest -vv
    depends_on:
      - mongo
      - postgres
    profiles:
      - test
    volumes:
      - ./logs/api:/var/log/api/
      # Dev speed up (no build)
      # - ./api:/opt/api
      # - ./db/mongo_db.py:/opt/api/src/db/mongo_db.py
      # - ./db/postgres_db.py:/opt/api/src/db/postgres_db.py
      # - ./commons:/opt/api/src/commons

  api_prod:
    container_name: biggie_api_prod
    image: biggie_api_img
    environment:
      <<: *biggie-common-env
    command: uvicorn main:app --host 0.0.0.0 --reload --log-level debug
    depends_on:
      - mongo
      - postgres
    ports:
      - "8000:8000"
    profiles:
      - prod_full
      - prod_analytics
    volumes:
      - ./logs/api:/var/log/api/
      - ./data/github_events/diagrams:/opt/api/templates/github_events/diagrams
      # Dev speed up (no build)
      # - ./api:/opt/api
      # - ./db/mongo_db.py:/opt/api/src/db/mongo_db.py
      # - ./db/postgres_db.py:/opt/api/src/db/postgres_db.py
      # - ./commons:/opt/api/src/commons

  celery_test:
    container_name: biggie_celery_test
    build:
      context: .
      dockerfile: celery_app/Dockerfile
      args:
        - TEST_MODE="True"
    image: biggie_celery_img
    <<: *biggie-celery-test
    depends_on:
      - rabbitmq
      - mongo
      - postgres
      - spark-master
      - spark-worker-1
      - spark-worker-2
    command: python3 -m pytest -vv test/sparky/test_mongo.py
    # command: sleep 10m
    profiles:
      - test
    restart: on-failure

  celery_prod:
    container_name: biggie_celery_prod
    image: biggie_celery_img
    <<: *biggie-celery-prod
    depends_on:
      - rabbitmq
      - mongo
      - postgres
      - spark-master
      - spark-worker-1
      - spark-worker-2
    command: sh run.sh
    profiles:
      - prod_full
      - prod_acquisition
    restart: on-failure
    # ports:
    #   - "5678:5678"  # Expose debugging port

  rabbitmq:
    container_name: biggie_rabbitmq
    image: rabbitmq:3.13.7-management
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - biggie_vrabbitmq:/var/lib/rabbitmq
      - ./logs/rabbitmq:/var/log/rabbitmq
    profiles:
      - test
      - prod_full
      - prod_acquisition

  spark-master:
    # container_name: biggie_spark_master
    build:
      context: conf/spark
      dockerfile: Dockerfile
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"  # Spark master port
      - "8080:8080"  # Web UI for Spark master

  spark-worker-1:
    build:
      context: conf/spark
      dockerfile: Dockerfile
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8091:8091"  # Web UI for this worker

  spark-worker-2:
    build:
      context: conf/spark
      dockerfile: Dockerfile
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8092:8092"  # Web UI for this worker
